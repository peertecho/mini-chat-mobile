// This file is autogenerated by the hyperschema compiler
// Schema Version: 1
/* eslint-disable camelcase */
/* eslint-disable quotes */
/* eslint-disable space-before-function-paren */

const { c } = require('hyperschema/runtime')

const VERSION = 1

// eslint-disable-next-line no-unused-vars
let version = VERSION

// @minichat/writers
const encoding0 = {
  preencode(state, m) {
    c.buffer.preencode(state, m.key)
  },
  encode(state, m) {
    c.buffer.encode(state, m.key)
  },
  decode(state) {
    const r0 = c.buffer.decode(state)

    return {
      key: r0
    }
  }
}

// @minichat/invites
const encoding1 = {
  preencode(state, m) {
    c.buffer.preencode(state, m.id)
    c.buffer.preencode(state, m.invite)
    c.buffer.preencode(state, m.publicKey)
    c.int.preencode(state, m.expires)
  },
  encode(state, m) {
    c.buffer.encode(state, m.id)
    c.buffer.encode(state, m.invite)
    c.buffer.encode(state, m.publicKey)
    c.int.encode(state, m.expires)
  },
  decode(state) {
    const r0 = c.buffer.decode(state)
    const r1 = c.buffer.decode(state)
    const r2 = c.buffer.decode(state)
    const r3 = c.int.decode(state)

    return {
      id: r0,
      invite: r1,
      publicKey: r2,
      expires: r3
    }
  }
}

// @minichat/users
const encoding2 = {
  preencode(state, m) {
    c.string.preencode(state, m.id)
    state.end++ // max flag is 1 so always one byte

    if (m.info) c.json.preencode(state, m.info)
  },
  encode(state, m) {
    const flags = m.info ? 1 : 0

    c.string.encode(state, m.id)
    c.uint.encode(state, flags)

    if (m.info) c.json.encode(state, m.info)
  },
  decode(state) {
    const r0 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      info: (flags & 1) !== 0 ? c.json.decode(state) : null
    }
  }
}

// @minichat/messages
const encoding3 = {
  preencode(state, m) {
    c.string.preencode(state, m.id)
    c.string.preencode(state, m.text)
    state.end++ // max flag is 1 so always one byte

    if (m.info) c.json.preencode(state, m.info)
  },
  encode(state, m) {
    const flags = m.info ? 1 : 0

    c.string.encode(state, m.id)
    c.string.encode(state, m.text)
    c.uint.encode(state, flags)

    if (m.info) c.json.encode(state, m.info)
  },
  decode(state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      text: r1,
      info: (flags & 1) !== 0 ? c.json.decode(state) : null
    }
  }
}

// @minichat/events
const encoding4 = {
  preencode(state, m) {
    c.string.preencode(state, m.id)
    state.end++ // max flag is 1 so always one byte

    if (m.data) c.json.preencode(state, m.data)
  },
  encode(state, m) {
    const flags = m.data ? 1 : 0

    c.string.encode(state, m.id)
    c.uint.encode(state, flags)

    if (m.data) c.json.encode(state, m.data)
  },
  decode(state) {
    const r0 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      data: (flags & 1) !== 0 ? c.json.decode(state) : null
    }
  }
}

// @minichat/writers/hyperdb#0
const encoding5 = {
  preencode(state, m) {

  },
  encode(state, m) {

  },
  decode(state) {
    return {
      key: null
    }
  }
}

// @minichat/invites/hyperdb#1
const encoding6 = {
  preencode(state, m) {
    c.buffer.preencode(state, m.invite)
    c.buffer.preencode(state, m.publicKey)
    c.int.preencode(state, m.expires)
  },
  encode(state, m) {
    c.buffer.encode(state, m.invite)
    c.buffer.encode(state, m.publicKey)
    c.int.encode(state, m.expires)
  },
  decode(state) {
    const r1 = c.buffer.decode(state)
    const r2 = c.buffer.decode(state)
    const r3 = c.int.decode(state)

    return {
      id: null,
      invite: r1,
      publicKey: r2,
      expires: r3
    }
  }
}

// @minichat/users/hyperdb#2
const encoding7 = {
  preencode(state, m) {
    state.end++ // max flag is 1 so always one byte

    if (m.info) c.json.preencode(state, m.info)
  },
  encode(state, m) {
    const flags = m.info ? 1 : 0

    c.uint.encode(state, flags)

    if (m.info) c.json.encode(state, m.info)
  },
  decode(state) {
    const flags = c.uint.decode(state)

    return {
      id: null,
      info: (flags & 1) !== 0 ? c.json.decode(state) : null
    }
  }
}

// @minichat/messages/hyperdb#3
const encoding8 = {
  preencode(state, m) {
    c.string.preencode(state, m.text)
    state.end++ // max flag is 1 so always one byte

    if (m.info) c.json.preencode(state, m.info)
  },
  encode(state, m) {
    const flags = m.info ? 1 : 0

    c.string.encode(state, m.text)
    c.uint.encode(state, flags)

    if (m.info) c.json.encode(state, m.info)
  },
  decode(state) {
    const r1 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: null,
      text: r1,
      info: (flags & 1) !== 0 ? c.json.decode(state) : null
    }
  }
}

function setVersion(v) {
  version = v
}

function encode(name, value, v = VERSION) {
  version = v
  return c.encode(getEncoding(name), value)
}

function decode(name, buffer, v = VERSION) {
  version = v
  return c.decode(getEncoding(name), buffer)
}

function getEnum(name) {
  switch (name) {
    default:
      throw new Error('Enum not found ' + name)
  }
}

function getEncoding(name) {
  switch (name) {
    case '@minichat/writers':
      return encoding0
    case '@minichat/invites':
      return encoding1
    case '@minichat/users':
      return encoding2
    case '@minichat/messages':
      return encoding3
    case '@minichat/events':
      return encoding4
    case '@minichat/writers/hyperdb#0':
      return encoding5
    case '@minichat/invites/hyperdb#1':
      return encoding6
    case '@minichat/users/hyperdb#2':
      return encoding7
    case '@minichat/messages/hyperdb#3':
      return encoding8
    default:
      throw new Error('Encoder not found ' + name)
  }
}

function getStruct(name, v = VERSION) {
  const enc = getEncoding(name)
  return {
    preencode(state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode(state, m) {
      version = v
      enc.encode(state, m)
    },
    decode(state) {
      version = v
      return enc.decode(state)
    }
  }
}

const resolveStruct = getStruct // compat

module.exports = {
  resolveStruct,
  getStruct,
  getEnum,
  getEncoding,
  encode,
  decode,
  setVersion,
  version
}
